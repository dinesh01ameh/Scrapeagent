version: '3.8'

services:
  # Main SwissKnife AI Scraper Backend
  swissknife:
    build:
      context: .
      dockerfile: Dockerfile
      target: development  # Use development stage for hot reload
    ports:
      - "8601:8601"
    environment:
      - DEBUG=true
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/swissknife
      - OLLAMA_ENDPOINT=http://ollama:11434
      - API_HOST=0.0.0.0
      - API_PORT=8601
      # CORS settings for frontend
      - CORS_ORIGINS=http://localhost:8650,http://frontend:80
    volumes:
      # Mount source code for development hot reload
      - .:/app
      - /app/__pycache__  # Exclude pycache
      # Data persistence
      - swissknife_data:/app/data
      - swissknife_cache:/app/cache
      - swissknife_logs:/app/logs
      - swissknife_models:/app/models
    depends_on:
      - redis
      - postgres
      - ollama
    restart: unless-stopped
    networks:
      - swissknife-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8601/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - swissknife-network

  # PostgreSQL database (alternative to Supabase for local development)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_DB=swissknife
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - swissknife-network

  # Ollama for local LLM processing
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11435:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_KEEP_ALIVE=24h
    restart: unless-stopped
    networks:
      - swissknife-network
    # Uncomment if you have NVIDIA GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - swissknife-network
    profiles:
      - monitoring

  # Frontend React Dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8650:80"
    environment:
      # API URL for frontend to communicate with backend
      - REACT_APP_API_URL=http://localhost:8601
      - REACT_APP_ENV=development
      - REACT_APP_DEBUG=true
    volumes:
      # Mount source code for development (optional)
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    depends_on:
      swissknife:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - swissknife-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"  # Changed port to avoid conflict with frontend
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - swissknife-network
    profiles:
      - monitoring

volumes:
  # Backend data volumes
  swissknife_data:
  swissknife_cache:
  swissknife_logs:
  swissknife_models:
  # Infrastructure volumes
  redis_data:
  postgres_data:
  ollama_data:
  prometheus_data:
  grafana_data:

networks:
  swissknife-network:
    driver: bridge
