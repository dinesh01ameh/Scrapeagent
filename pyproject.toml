[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "swissknife-ai-scraper"
version = "1.0.0"
description = "The Ultimate Web Scraping Swiss Knife with Local AI Intelligence"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "SwissKnife AI Team", email = "team@swissknife-ai.com"}
]
maintainers = [
    {name = "SwissKnife AI Team", email = "team@swissknife-ai.com"}
]
keywords = [
    "web-scraping",
    "ai",
    "llm",
    "automation",
    "data-extraction",
    "crawling",
    "ollama",
    "fastapi"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "crawl4ai>=0.3.74",
    "playwright>=1.40.0",
    "beautifulsoup4>=4.12.2",
    "lxml>=4.9.3",
    "requests>=2.31.0",
    "httpx>=0.25.2",
    "aiohttp>=3.9.1",
    "ollama>=0.1.7",
    "langchain>=0.1.0",
    "langchain-community>=0.0.10",
    "jina>=3.21.0",
    "transformers>=4.36.0",
    "torch>=2.1.1",
    "sentence-transformers>=2.2.2",
    "chromadb>=0.4.18",
    "pytesseract>=0.3.10",
    "easyocr>=1.7.0",
    "Pillow>=10.1.0",
    "opencv-python>=4.8.1.78",
    "supabase>=2.3.0",
    "psycopg2-binary>=2.9.9",
    "redis>=5.0.1",
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.1",
    "aiohttp-socks>=0.8.4",
    "fake-useragent>=1.4.0",
    "python-dotenv>=1.0.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "celery>=5.3.4",
    "schedule>=1.2.0",
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "rich>=13.7.0",
    "pandas>=2.1.4",
    "numpy>=1.25.2",
    "openpyxl>=3.1.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.5.0",
    "isort>=5.12.0",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "grafana-api>=1.0.3",
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/swissknife-ai/scraper"
Documentation = "https://docs.swissknife-ai.com"
Repository = "https://github.com/swissknife-ai/scraper"
"Bug Tracker" = "https://github.com/swissknife-ai/scraper/issues"

[project.scripts]
swissknife = "main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "docs*", "docker*"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "crawl4ai.*",
    "jina.*",
    "ollama.*",
    "chromadb.*",
    "easyocr.*",
    "cv2.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --asyncio-mode=auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
asyncio_mode = "auto"
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/env/*",
    "*/.env/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
